{"version":3,"sources":["reportWebVitals.ts","models/index.ts","models/TodoListStore.ts","routes.tsx","pages/HomePage.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","stores","todolistStore","makeObservable","toggle","action","item","checked","RStore","ajaxErrorHandler","error","message","console","Object","values","StoreContext","React","createContext","component","HomePage","observer","useContext","useEffect","fetchSome","limit","offset","items","list","map","Item","onChange","todo","id","gutter","className","span","bordered","routes","home","NoArgsPathDef","props","element","createElement","direction","style","width","menus","ReactDOM","render","Provider","value","enUSLocale","document","getElementById"],"mappings":"+KAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4FCJDQ,EAAS,CACpBC,cAAe,ICGjB,kDACE,aAAe,IAAD,6BACZ,gCAEAC,YAAe,eAAM,CACnBC,OAAQC,MAJE,EADhB,0CASE,SAAOC,GACLA,EAAKC,SAAWD,EAAKC,YAVzB,GAAmCC,ODCnC,SAASC,EAAiBC,GACxBC,IAAQD,MACN,uEACA,IAEFE,QAAQF,MAAMA,GAGhB,cAAkBG,OAAOC,OAAOb,GAAhC,eAAyC,CAA3B,KACNQ,iBAAmBA,EAGpB,IAAMM,EAAeC,IAAMC,cAAsBhB,G,IEftDiB,E,iBCFWC,EAAWC,aAAS,WAC/B,IAAQlB,EHmBDc,IAAMK,WAAWN,GGnBhBb,cACRoB,qBAAU,WACRpB,EAAcqB,UAAU,CAAEC,MAAO,IAAMC,OAAQ,MAC9C,IAEH,IAAMC,EAAQxB,EAAcyB,KAAKC,KAAI,SAACtB,GACpC,OACE,eAAC,IAAKuB,KAAN,WACE,cAAC,IAAD,CACEtB,QAASD,EAAKC,QACduB,SAAU,WACR5B,EAAcE,OAAOE,IAHzB,SAMGA,EAAKyB,OACI,MAREzB,EAAK0B,OAazB,OACE,cAAC,IAAD,CAAKC,OAAQ,GAAb,SACE,cAAC,IAAD,CAAKC,UAAU,aAAaC,KAAM,EAAGV,OAAQ,EAA7C,SACE,cAAC,IAAD,CAAMW,UAAU,EAAhB,SAAuBV,W,SDNlBW,EAAS,CACpBC,KAAM,IAAIC,KAjBVrB,EAiB+BC,EAfxB,SAACqB,GACN,IAAMC,EAAUzB,IAAM0B,cAAcxB,EAAWsB,GAC/C,OACE,eAAC,IAAD,CAAOG,UAAU,WAAWC,MAAO,CAAEC,MAAO,QAA5C,UACE,cAAC,IAAD,CAAcC,MAAO,CAAER,KAAM,QAAUD,OAAQA,IAC9CI,OAUmC,KAAK,IEhBjDM,IAASC,OACP,cAACjC,EAAakC,SAAd,CAAuBC,MAAOjD,EAA9B,SACE,cAAC,IAAD,CAAKkD,YAAY,EAAOd,OAAQA,MAElCe,SAASC,eAAe,SAM1B7D,M","file":"static/js/main.cbcd5131.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { message } from \"antd\";\nimport { AxiosError } from \"axios\";\nimport React from \"react\";\nimport { TodoListStore } from \"./TodoListStore\";\n\nexport const stores = {\n  todolistStore: new TodoListStore(),\n};\nexport type IStore = Readonly<typeof stores>;\n\nfunction ajaxErrorHandler(error: AxiosError<any>) {\n  message.error(\n    \"Error while talking with the server. Check console for more details.\",\n    10\n  );\n  console.error(error);\n}\n\nfor (let store of Object.values(stores)) {\n  store.ajaxErrorHandler = ajaxErrorHandler;\n}\n\nexport const StoreContext = React.createContext<IStore>(stores);\n\nexport function useStores(): IStore {\n  return React.useContext(StoreContext);\n}\n\nexport { TodoListStore as VariableStore };\nexport type { TodoList } from \"./TodoListStore\";\n","import { RStore } from \"rma-baseapp\";\nimport { makeObservable, action } from \"mobx\";\n\nexport interface TodoList {\n  id: number;\n  checked: boolean;\n  todo: string;\n}\n\nexport class TodoListStore extends RStore<number, TodoList> {\n  constructor() {\n    super(`/api/todo_list`);\n\n    makeObservable(this, {\n      toggle: action,\n    });\n  }\n\n  toggle(item: TodoList) {\n    item.checked = !item.checked;\n  }\n}\n","import { NoArgsPathDef, NoQueryArgsPathDef } from \"rma-baseapp\";\nimport { HomePage } from \"./pages/HomePage\";\nimport React from \"react\";\nimport { CenterNavBar } from \"rma-baseapp\";\nimport { Space } from \"antd\";\n\nexport const Layout = (\n  component: React.FunctionComponent<any> | React.ComponentClass<any, any>\n) => {\n  return (props: any) => {\n    const element = React.createElement(component, props);\n    return (\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <CenterNavBar menus={{ home: \"Home\" }} routes={routes} />\n        {element}\n      </Space>\n    );\n  };\n};\n\n/*************************************************************************************\n * Definitions for routes in this application:\n */\nexport const routes = {\n  home: new NoArgsPathDef(Layout(HomePage), \"/\", true),\n};\n","import { useEffect } from \"react\";\nimport { Col, Checkbox, Row, List, Button } from \"antd\";\nimport { useStores } from \"../models\";\nimport { observer } from \"mobx-react\";\n\nexport const HomePage = observer(() => {\n  const { todolistStore } = useStores();\n  useEffect(() => {\n    todolistStore.fetchSome({ limit: 1000, offset: 0 });\n  }, []);\n\n  const items = todolistStore.list.map((item) => {\n    return (\n      <List.Item key={item.id}>\n        <Checkbox\n          checked={item.checked}\n          onChange={() => {\n            todolistStore.toggle(item);\n          }}\n        >\n          {item.todo}\n        </Checkbox>{\" \"}\n      </List.Item>\n    );\n  });\n\n  return (\n    <Row gutter={16}>\n      <Col className=\"gutter-row\" span={8} offset={8}>\n        <List bordered={true}>{items}</List>\n      </Col>\n    </Row>\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"rma-baseapp\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { routes } from \"./routes\";\nimport { stores, StoreContext } from \"./models\";\n\nReactDOM.render(\n  <StoreContext.Provider value={stores}>\n    <App enUSLocale={false} routes={routes} />\n  </StoreContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}